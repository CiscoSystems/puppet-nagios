#!/usr/bin/env perl
#
# check_rabbitmq_objects
#
# Use the management APIs to count various server objects -
# vhost, exchange, binding, queue, channel
#
use strict;
use warnings;

use Nagios::Plugin ;
use LWP::UserAgent;
use URI::Escape;
use JSON;

use vars qw($VERSION $PROGNAME  $verbose $timeout);
$VERSION = '1.0';

# get the base name of this script for use in the examples
use File::Basename;
$PROGNAME = basename($0);

my $p = Nagios::Plugin->new(
    usage => "Usage: %s [options] -H hostname",
    license => "",
    version => $VERSION,
    blurb => 'This plugin uses the RabbitMQ management to count various objects.',
);

$p->add_arg(spec => 'host|H=s',
    help => "Specify the host to connect to",
    required => 1
);
$p->add_arg(spec => 'port=i',
    help => "Specify the port to connect to (default: %s)",
    default => 55672
);

$p->add_arg(spec => 'user|u=s',
    help => "Username (default: %s)",
    default => "guest",
);
$p->add_arg(spec => 'password|p=s',
    help => "Password (default: %s)",
    default => "guest"
);


# Parse arguments and process standard ones (e.g. usage, help, version)
$p->getopts;


# perform sanity checking on command line options


##############################################################################
# check stuff.

my $hostname=$p->opts->host;
my $port=$p->opts->port;

my $ua = LWP::UserAgent->new(env_proxy=>1);
$ua->agent($PROGNAME.' ');
$ua->timeout($p->opts->timeout);
# Different security domains in 2.5 and 2.6
$ua->credentials("$hostname:$port",
    "RabbitMQ Management", $p->opts->user, $p->opts->password);
$ua->credentials("$hostname:$port",
    "Management: Web UI", $p->opts->user, $p->opts->password);

my @calls = ("vhost", "exchange", "binding", "queue", "channel");
for my $call (@calls) {
    my $url = sprintf("http://%s:%d/api/%ss", $hostname, $port, $call);
    my ($code, $result) = request($url);
    if ($code != 200) {
        $p->nagios_exit(CRITICAL, "$result : /api/". $call."s");
    }
    # we're always returned a list - count it
    my $count = $#{$result};
    $count = 0 if $count == -1;
    $p->add_message(OK, sprintf("$call (%.2f%%)", $count)) ;
    $p->add_perfdata(label=>$call, value => $count);

}

$p->nagios_exit(return_code => OK, message => "Gathered Object Counts");

sub request {
    my ($url) = @_;
    my $req = HTTP::Request->new(GET => $url);
    my $res = $ua->request($req);

    if (!$res->is_success) {
        # Deal with standard error conditions - make the messages more sensible
        if ($res->code == 400) {
            my $bodyref = decode_json $res->content;
            return (400, $bodyref->{'reason'});

        }
        $res->code == 404 and return (404, "Not Found");
        $res->code == 401 and return (401, "Access Refused");
        $res->status_line =~ /Can\'t connect/ and return (500, "Connection Refused : $url");
        if ($res->code < 200 or $res->code > 400 ) {
            return ($res->code, "Received ".$res->status_line);
        }
    }
    my $bodyref = decode_json $res->content;
    return($res->code, $bodyref);
}

=head1 NAME

check_rabbitmq_objects - Nagios plugin using RabbitMQ management API to
count the number of various broker objects

=head1 SYNOPSIS

check_rabbitmq_objects [options] -H hostname

=head1 DESCRIPTION

Use the management interface of RabbitMQ to count the number of various
broker objects.  These are published as performance metrics for the check.

Currently the following objects are counted:

=over

=item * vhost

=item * exchange

=item * binding

=item * queue

=item * channel

=back

It uses Nagios::Plugin and accepts all standard Nagios options.

=head1 OPTIONS

=over

=item -h | --help

Display help text

=item -v | --verbose

Verbose output

=item -t | --timeout

Set a timeout for the check in seconds

=item -H | --host

The host to connect to

=item --port

The port to connect to (default: 55672)

=item --user

The user to connect as (default: guest)

=item --pass

The password for the user (default: guest)

=back

=head1 EXAMPLES

The defaults all work with a standard fresh install of RabbitMQ, and all that
is needed is to specify the host to connect to:

    check_rabbitmq_objects -H rabbit.example.com

This returns a standard Nagios result:

    RABBITMQ_OBJECTS OK - Gathered Object Counts | vhost=1;; exchange=7;;
      binding=2;; queue=1;; channel=0;;

=head1 ERRORS

The check tries to provide useful error messages on the status line for
standard error conditions.

Otherwise it returns the HTTP Error message returned by the management
interface.

=head1 EXIT STATUS

Returns zero if check is OK otherwise returns standard Nagios exit codes to
signify WARNING, UNKNOWN or CRITICAL state.

=head1 SEE ALSO

See Nagios::Plugin(3)

The RabbitMQ management plugin is described at
http://www.rabbitmq.com/management.html

=head1 LICENSE

This file is part of nagios-plugins-rabbitmq.

Copyright 2010, Platform 14.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

=head1 AUTHOR

James Casey <jamesc.000@gmail.com>

=cut

1;
